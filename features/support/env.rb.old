#!/usr/local/bin/ruby
################################################################################
#
#	Nagios Ruby WebDriver plugin.
#
#	By Sergio Boso		www.bosoconsulting.it
#
#	This software is covered by GPL license
#	It is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
#	WARRANTY OF DESIGN, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
#	You can use and modify it but you must keep this message in it.
#
#
#	Wscan  - uses NSCA architecture to Nagios
#			- executes multiple service checks on multiple host in sequence
#			- executes multiple Selenium IDE tables per service.
#
#	parameters:
#		none
################################################################################
# add source location
#
$LOAD_PATH.unshift(File.dirname(__FILE__))
puts
require File.dirname(__FILE__)+'/../../../Crossover/Src/definitions.rb'

require 'rexml/document'
include REXML																	# so that we don't have to prefix everything with REXML::...

require 'optparse'
require 'pp'
require 'headless'
require 'OS'
require 'open3'
require 'timeout'
require 'net/smtp'
require 'test/unit'

require File.dirname(__FILE__)+'/../../../Crossover/Src/logRoutine.rb'
require File.dirname(__FILE__)+'/../../../Crossover/Src/perfRoutine.rb'
require File.dirname(__FILE__)+'/../../../Crossover/Src/browserCommands.rb'
require File.dirname(__FILE__)+'/../../../Crossover/Src/sendServRes.rb'														# either on file or via NSCA
require File.dirname(__FILE__)+'/../../../Crossover/Src/confRoutine.rb'
require File.dirname(__FILE__)+'/../../../Crossover/Src/commandExec.rb'

#

require 'watir-webdriver'														#open a browser WD mode
require 'watir-webdriver-performance'
# require "rexml/document"

################################################################################
MinThinkTime=15.0
MaxThinkTime=45.0


 def thinkTime
	 return(rand(MinThinkTime..MaxThinkTime))
 end

################################################################################
#
#		Calc service result
#
################################################################################

def calcServiceRes(scenario)

	locService= scenario.title									# do calculation on single service file
	locServer= $gcfd.brwsrType
	case $gcfd.brwsrType
		when 'fi' then locServer='Firefox'
		when 'ie' then locServer='Explorer'
		when 'ch' then locServer='Chrome'
	end

	iServ=0
	locWarnTO= $gcfd.scfd[iServ].warnTO
	locCritTO= $gcfd.scfd[iServ].critTO
	$pfd.perfClose(locService, $brws.url.to_s)
	$pfd.applResMsg= $pfd.CalcPerfData(iServ, locWarnTO, locCritTO)

	$pfd.append2JtlTotal()
	return sendServRes( locServer, locService, 0, $pfd.applResMsg, $pfd.retState) # process output to Nagios or whatever
end
 
################################################################################
#
#		Beginning of env setup
#
################################################################################


$gcfd= GlobConfData.new															# create browser interface
parms= './Cfg/cucumber.conf',''													# get command line info

iScenario= 0
namScen= iScenario.to_s
$gcfd.startUp(parms[0], parms[1])												# GLOBAL SETUP
ret=OK

#	World do
#	end

Before do |scenario|

#	puts 'starting scenario'+ scenario.feature.name+' '+ scenario.name
# pp  scenario
# pp iScenario

#	$pfd=PerfData.new($gcfd.logPath+scenario.title, false, CUCUMBER, CUCUMBER)		# get results file name from service name
#	$pfd=PerfData.new($gcfd.logPath+scenario.title+namScen, false, CUCUMBER, CUCUMBER)		# get results file name from service name

end

# Before('@cucumis, @sativus') do
	# This will only run before scenarios tagged
	# with @cucumis OR @sativus.
# end

After do |scenario|
	# Do something after each scenario.
	# The +scenario+ argument is optional, but
	# if you use it, you can inspect status with
	# the #failed?, #passed? and #exception methods.

	res= calcServiceRes( scenario)               										# we reference always to service[0]

#	if(scenario.failed?)
#		puts scenario.title +" failed!"+ ' Ris.'+res.to_s
#	end
	puts "Scenario " +namScen+ " finished"
	iScenario +=1
	namScen= iScenario.to_s
end

at_exit do
	$gcfd.tearDown()
	puts 'Cucumber stopped'
end

